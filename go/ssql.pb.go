// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: ssql.proto

package ssql

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// note: ssd runtime contains static convert table to arrow2 data type
type Type int32

const (
	Type_list    Type = 0
	Type_struct  Type = 1
	Type_int8    Type = 2
	Type_uint8   Type = 3
	Type_int16   Type = 4
	Type_uint16  Type = 5
	Type_int32   Type = 6
	Type_uint32  Type = 7
	Type_date32  Type = 8
	Type_float32 Type = 9
	Type_int64   Type = 10
	Type_uint64  Type = 11
	Type_date64  Type = 12
	Type_float64 Type = 13
	Type_bool    Type = 14
	Type_text    Type = 15
	Type_null    Type = 16
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "list",
		1:  "struct",
		2:  "int8",
		3:  "uint8",
		4:  "int16",
		5:  "uint16",
		6:  "int32",
		7:  "uint32",
		8:  "date32",
		9:  "float32",
		10: "int64",
		11: "uint64",
		12: "date64",
		13: "float64",
		14: "bool",
		15: "text",
		16: "null",
	}
	Type_value = map[string]int32{
		"list":    0,
		"struct":  1,
		"int8":    2,
		"uint8":   3,
		"int16":   4,
		"uint16":  5,
		"int32":   6,
		"uint32":  7,
		"date32":  8,
		"float32": 9,
		"int64":   10,
		"uint64":  11,
		"date64":  12,
		"float64": 13,
		"bool":    14,
		"text":    15,
		"null":    16,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ssql_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_ssql_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{0}
}

type Operator int32

const (
	Operator_EQ      Operator = 0
	Operator_NEQ     Operator = 1
	Operator_GT      Operator = 2
	Operator_GE      Operator = 3
	Operator_LT      Operator = 4
	Operator_LE      Operator = 5
	Operator_BETWEEN Operator = 6
	Operator_CONTAIN Operator = 7
	Operator_EXIST   Operator = 8
	Operator_ISNULL  Operator = 9
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "EQ",
		1: "NEQ",
		2: "GT",
		3: "GE",
		4: "LT",
		5: "LE",
		6: "BETWEEN",
		7: "CONTAIN",
		8: "EXIST",
		9: "ISNULL",
	}
	Operator_value = map[string]int32{
		"EQ":      0,
		"NEQ":     1,
		"GT":      2,
		"GE":      3,
		"LT":      4,
		"LE":      5,
		"BETWEEN": 6,
		"CONTAIN": 7,
		"EXIST":   8,
		"ISNULL":  9,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_ssql_proto_enumTypes[1].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_ssql_proto_enumTypes[1]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{1}
}

type Function_Func int32

const (
	Function_AVG        Function_Func = 0
	Function_SUM        Function_Func = 1
	Function_MIN        Function_Func = 2
	Function_MAX        Function_Func = 3
	Function_COUNT      Function_Func = 4
	Function_PERCENTILE Function_Func = 5
	Function_PARTITION  Function_Func = 6
)

// Enum value maps for Function_Func.
var (
	Function_Func_name = map[int32]string{
		0: "AVG",
		1: "SUM",
		2: "MIN",
		3: "MAX",
		4: "COUNT",
		5: "PERCENTILE",
		6: "PARTITION",
	}
	Function_Func_value = map[string]int32{
		"AVG":        0,
		"SUM":        1,
		"MIN":        2,
		"MAX":        3,
		"COUNT":      4,
		"PERCENTILE": 5,
		"PARTITION":  6,
	}
)

func (x Function_Func) Enum() *Function_Func {
	p := new(Function_Func)
	*p = x
	return p
}

func (x Function_Func) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Function_Func) Descriptor() protoreflect.EnumDescriptor {
	return file_ssql_proto_enumTypes[2].Descriptor()
}

func (Function_Func) Type() protoreflect.EnumType {
	return &file_ssql_proto_enumTypes[2]
}

func (x Function_Func) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Function_Func.Descriptor instead.
func (Function_Func) EnumDescriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{3, 0}
}

type Timestamp_TimeUnit int32

const (
	Timestamp_Second      Timestamp_TimeUnit = 0
	Timestamp_Millisecond Timestamp_TimeUnit = 1
	Timestamp_Microsecond Timestamp_TimeUnit = 2
	Timestamp_Nanosecond  Timestamp_TimeUnit = 3
)

// Enum value maps for Timestamp_TimeUnit.
var (
	Timestamp_TimeUnit_name = map[int32]string{
		0: "Second",
		1: "Millisecond",
		2: "Microsecond",
		3: "Nanosecond",
	}
	Timestamp_TimeUnit_value = map[string]int32{
		"Second":      0,
		"Millisecond": 1,
		"Microsecond": 2,
		"Nanosecond":  3,
	}
)

func (x Timestamp_TimeUnit) Enum() *Timestamp_TimeUnit {
	p := new(Timestamp_TimeUnit)
	*p = x
	return p
}

func (x Timestamp_TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timestamp_TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_ssql_proto_enumTypes[3].Descriptor()
}

func (Timestamp_TimeUnit) Type() protoreflect.EnumType {
	return &file_ssql_proto_enumTypes[3]
}

func (x Timestamp_TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timestamp_TimeUnit.Descriptor instead.
func (Timestamp_TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{4, 0}
}

type OrderBy_Direction int32

const (
	OrderBy_ASC  OrderBy_Direction = 0
	OrderBy_DESC OrderBy_Direction = 1
)

// Enum value maps for OrderBy_Direction.
var (
	OrderBy_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	OrderBy_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x OrderBy_Direction) Enum() *OrderBy_Direction {
	p := new(OrderBy_Direction)
	*p = x
	return p
}

func (x OrderBy_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_ssql_proto_enumTypes[4].Descriptor()
}

func (OrderBy_Direction) Type() protoreflect.EnumType {
	return &file_ssql_proto_enumTypes[4]
}

func (x OrderBy_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy_Direction.Descriptor instead.
func (OrderBy_Direction) EnumDescriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{15, 0}
}

type Aux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalOnly           bool     `protobuf:"varint,1,opt,name=local_only,json=localOnly,proto3" json:"local_only,omitempty"`
	TupleCount          uint32   `protobuf:"varint,2,opt,name=tuple_count,json=tupleCount,proto3" json:"tuple_count,omitempty"`
	AggregateAttributes []uint32 `protobuf:"varint,3,rep,packed,name=aggregate_attributes,json=aggregateAttributes,proto3" json:"aggregate_attributes,omitempty"`
	GroupAttributes     []uint32 `protobuf:"varint,4,rep,packed,name=group_attributes,json=groupAttributes,proto3" json:"group_attributes,omitempty"`
}

func (x *Aux) Reset() {
	*x = Aux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aux) ProtoMessage() {}

func (x *Aux) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aux.ProtoReflect.Descriptor instead.
func (*Aux) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{0}
}

func (x *Aux) GetLocalOnly() bool {
	if x != nil {
		return x.LocalOnly
	}
	return false
}

func (x *Aux) GetTupleCount() uint32 {
	if x != nil {
		return x.TupleCount
	}
	return 0
}

func (x *Aux) GetAggregateAttributes() []uint32 {
	if x != nil {
		return x.AggregateAttributes
	}
	return nil
}

func (x *Aux) GetGroupAttributes() []uint32 {
	if x != nil {
		return x.GroupAttributes
	}
	return nil
}

type Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Find    []*Attribute `protobuf:"bytes,1,rep,name=find,proto3" json:"find,omitempty"`
	From    string       `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Where   []*Expr      `protobuf:"bytes,3,rep,name=where,proto3" json:"where,omitempty"`
	OrderBy []*OrderBy   `protobuf:"bytes,4,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Limit   uint32       `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Aux     *Aux         `protobuf:"bytes,6,opt,name=aux,proto3" json:"aux,omitempty"`
}

func (x *Statement) Reset() {
	*x = Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{1}
}

func (x *Statement) GetFind() []*Attribute {
	if x != nil {
		return x.Find
	}
	return nil
}

func (x *Statement) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Statement) GetWhere() []*Expr {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *Statement) GetOrderBy() []*OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *Statement) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Statement) GetAux() *Aux {
	if x != nil {
		return x.Aux
	}
	return nil
}

type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Parameter_Double
	//	*Parameter_Int
	Value isParameter_Value `protobuf_oneof:"value"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{2}
}

func (m *Parameter) GetValue() isParameter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Parameter) GetDouble() float64 {
	if x, ok := x.GetValue().(*Parameter_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Parameter) GetInt() int64 {
	if x, ok := x.GetValue().(*Parameter_Int); ok {
		return x.Int
	}
	return 0
}

type isParameter_Value interface {
	isParameter_Value()
}

type Parameter_Double struct {
	Double float64 `protobuf:"fixed64,1,opt,name=double,proto3,oneof"`
}

type Parameter_Int struct {
	Int int64 `protobuf:"varint,2,opt,name=int,proto3,oneof"`
}

func (*Parameter_Double) isParameter_Value() {}

func (*Parameter_Int) isParameter_Value() {}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      Function_Func `protobuf:"varint,1,opt,name=name,proto3,enum=Function_Func" json:"name,omitempty"`
	Parameter []*Parameter  `protobuf:"bytes,2,rep,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{3}
}

func (x *Function) GetName() Function_Func {
	if x != nil {
		return x.Name
	}
	return Function_AVG
}

func (x *Function) GetParameter() []*Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeunit Timestamp_TimeUnit `protobuf:"varint,1,opt,name=timeunit,proto3,enum=Timestamp_TimeUnit" json:"timeunit,omitempty"`
	Tz       string             `protobuf:"bytes,2,opt,name=tz,proto3" json:"tz,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{4}
}

func (x *Timestamp) GetTimeunit() Timestamp_TimeUnit {
	if x != nil {
		return x.Timeunit
	}
	return Timestamp_Second
}

func (x *Timestamp) GetTz() string {
	if x != nil {
		return x.Tz
	}
	return ""
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unicode   uint32     `protobuf:"varint,1,opt,name=unicode,proto3" json:"unicode,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type      Type       `protobuf:"varint,3,opt,name=type,proto3,enum=Type" json:"type,omitempty"`
	Timestamp *Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Nested:
	//	*Field_Struct_
	//	*Field_List
	Nested isField_Nested `protobuf_oneof:"nested"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{5}
}

func (x *Field) GetUnicode() uint32 {
	if x != nil {
		return x.Unicode
	}
	return 0
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_list
}

func (x *Field) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *Field) GetNested() isField_Nested {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (x *Field) GetStruct() *Field_Struct {
	if x, ok := x.GetNested().(*Field_Struct_); ok {
		return x.Struct
	}
	return nil
}

func (x *Field) GetList() *Field {
	if x, ok := x.GetNested().(*Field_List); ok {
		return x.List
	}
	return nil
}

type isField_Nested interface {
	isField_Nested()
}

type Field_Struct_ struct {
	Struct *Field_Struct `protobuf:"bytes,5,opt,name=struct,proto3,oneof"`
}

type Field_List struct {
	List *Field `protobuf:"bytes,6,opt,name=list,proto3,oneof"`
}

func (*Field_Struct_) isField_Nested() {}

func (*Field_List) isField_Nested() {}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group bool      `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Func  *Function `protobuf:"bytes,3,opt,name=func,proto3" json:"func,omitempty"`
	//Type type = 4;
	Arrow   *Field `protobuf:"bytes,4,opt,name=arrow,proto3" json:"arrow,omitempty"`
	TupleId uint32 `protobuf:"varint,5,opt,name=tuple_id,json=tupleId,proto3" json:"tuple_id,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{6}
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetGroup() bool {
	if x != nil {
		return x.Group
	}
	return false
}

func (x *Attribute) GetFunc() *Function {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *Attribute) GetArrow() *Field {
	if x != nil {
		return x.Arrow
	}
	return nil
}

func (x *Attribute) GetTupleId() uint32 {
	if x != nil {
		return x.TupleId
	}
	return 0
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//	*Expr_Or
	//	*Expr_Tuple
	Field isExpr_Field `protobuf_oneof:"field"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{7}
}

func (m *Expr) GetField() isExpr_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *Expr) GetOr() *OR {
	if x, ok := x.GetField().(*Expr_Or); ok {
		return x.Or
	}
	return nil
}

func (x *Expr) GetTuple() *Tuple {
	if x, ok := x.GetField().(*Expr_Tuple); ok {
		return x.Tuple
	}
	return nil
}

type isExpr_Field interface {
	isExpr_Field()
}

type Expr_Or struct {
	Or *OR `protobuf:"bytes,1,opt,name=or,proto3,oneof"`
}

type Expr_Tuple struct {
	Tuple *Tuple `protobuf:"bytes,2,opt,name=tuple,proto3,oneof"`
}

func (*Expr_Or) isExpr_Field() {}

func (*Expr_Tuple) isExpr_Field() {}

type OR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*Expr `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *OR) Reset() {
	*x = OR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OR) ProtoMessage() {}

func (x *OR) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OR.ProtoReflect.Descriptor instead.
func (*OR) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{8}
}

func (x *OR) GetExpr() []*Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Operand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Types that are assignable to Value:
	//	*Operand_Int8
	//	*Operand_Uint8
	//	*Operand_Int16
	//	*Operand_Uint16
	//	*Operand_Int32
	//	*Operand_Date32
	//	*Operand_Uint32
	//	*Operand_Float32
	//	*Operand_Int64
	//	*Operand_Date64
	//	*Operand_Uint64
	//	*Operand_Float64
	//	*Operand_Bool
	//	*Operand_Text
	//	*Operand_Null
	Value isOperand_Value `protobuf_oneof:"value"`
}

func (x *Operand) Reset() {
	*x = Operand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operand) ProtoMessage() {}

func (x *Operand) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operand.ProtoReflect.Descriptor instead.
func (*Operand) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{9}
}

func (x *Operand) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (m *Operand) GetValue() isOperand_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Operand) GetInt8() int32 {
	if x, ok := x.GetValue().(*Operand_Int8); ok {
		return x.Int8
	}
	return 0
}

func (x *Operand) GetUint8() uint32 {
	if x, ok := x.GetValue().(*Operand_Uint8); ok {
		return x.Uint8
	}
	return 0
}

func (x *Operand) GetInt16() int32 {
	if x, ok := x.GetValue().(*Operand_Int16); ok {
		return x.Int16
	}
	return 0
}

func (x *Operand) GetUint16() uint32 {
	if x, ok := x.GetValue().(*Operand_Uint16); ok {
		return x.Uint16
	}
	return 0
}

func (x *Operand) GetInt32() int32 {
	if x, ok := x.GetValue().(*Operand_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *Operand) GetDate32() int32 {
	if x, ok := x.GetValue().(*Operand_Date32); ok {
		return x.Date32
	}
	return 0
}

func (x *Operand) GetUint32() uint32 {
	if x, ok := x.GetValue().(*Operand_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *Operand) GetFloat32() float32 {
	if x, ok := x.GetValue().(*Operand_Float32); ok {
		return x.Float32
	}
	return 0
}

func (x *Operand) GetInt64() int64 {
	if x, ok := x.GetValue().(*Operand_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *Operand) GetDate64() int64 {
	if x, ok := x.GetValue().(*Operand_Date64); ok {
		return x.Date64
	}
	return 0
}

func (x *Operand) GetUint64() uint64 {
	if x, ok := x.GetValue().(*Operand_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *Operand) GetFloat64() float64 {
	if x, ok := x.GetValue().(*Operand_Float64); ok {
		return x.Float64
	}
	return 0
}

func (x *Operand) GetBool() bool {
	if x, ok := x.GetValue().(*Operand_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *Operand) GetText() bool {
	if x, ok := x.GetValue().(*Operand_Text); ok {
		return x.Text
	}
	return false
}

func (x *Operand) GetNull() bool {
	if x, ok := x.GetValue().(*Operand_Null); ok {
		return x.Null
	}
	return false
}

type isOperand_Value interface {
	isOperand_Value()
}

type Operand_Int8 struct {
	Int8 int32 `protobuf:"varint,2,opt,name=int8,proto3,oneof"`
}

type Operand_Uint8 struct {
	Uint8 uint32 `protobuf:"varint,3,opt,name=uint8,proto3,oneof"`
}

type Operand_Int16 struct {
	Int16 int32 `protobuf:"varint,4,opt,name=int16,proto3,oneof"`
}

type Operand_Uint16 struct {
	Uint16 uint32 `protobuf:"varint,5,opt,name=uint16,proto3,oneof"`
}

type Operand_Int32 struct {
	Int32 int32 `protobuf:"varint,6,opt,name=int32,proto3,oneof"`
}

type Operand_Date32 struct {
	Date32 int32 `protobuf:"varint,7,opt,name=date32,proto3,oneof"`
}

type Operand_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,8,opt,name=uint32,proto3,oneof"`
}

type Operand_Float32 struct {
	Float32 float32 `protobuf:"fixed32,9,opt,name=float32,proto3,oneof"`
}

type Operand_Int64 struct {
	Int64 int64 `protobuf:"varint,10,opt,name=int64,proto3,oneof"`
}

type Operand_Date64 struct {
	Date64 int64 `protobuf:"varint,11,opt,name=date64,proto3,oneof"`
}

type Operand_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,12,opt,name=uint64,proto3,oneof"`
}

type Operand_Float64 struct {
	Float64 float64 `protobuf:"fixed64,13,opt,name=float64,proto3,oneof"`
}

type Operand_Bool struct {
	Bool bool `protobuf:"varint,14,opt,name=bool,proto3,oneof"`
}

type Operand_Text struct {
	Text bool `protobuf:"varint,15,opt,name=text,proto3,oneof"`
}

type Operand_Null struct {
	Null bool `protobuf:"varint,16,opt,name=null,proto3,oneof"`
}

func (*Operand_Int8) isOperand_Value() {}

func (*Operand_Uint8) isOperand_Value() {}

func (*Operand_Int16) isOperand_Value() {}

func (*Operand_Uint16) isOperand_Value() {}

func (*Operand_Int32) isOperand_Value() {}

func (*Operand_Date32) isOperand_Value() {}

func (*Operand_Uint32) isOperand_Value() {}

func (*Operand_Float32) isOperand_Value() {}

func (*Operand_Int64) isOperand_Value() {}

func (*Operand_Date64) isOperand_Value() {}

func (*Operand_Uint64) isOperand_Value() {}

func (*Operand_Float64) isOperand_Value() {}

func (*Operand_Bool) isOperand_Value() {}

func (*Operand_Text) isOperand_Value() {}

func (*Operand_Null) isOperand_Value() {}

type Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path    string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Unicode uint32 `protobuf:"varint,4,opt,name=unicode,proto3" json:"unicode,omitempty"`
	// Types that are assignable to Predicate:
	//	*Tuple_Nested
	//	*Tuple_Binary
	//	*Tuple_Unary
	//	*Tuple_List
	//	*Tuple_SelectOnly
	Predicate isTuple_Predicate `protobuf_oneof:"predicate"`
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{10}
}

func (x *Tuple) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tuple) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tuple) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Tuple) GetUnicode() uint32 {
	if x != nil {
		return x.Unicode
	}
	return 0
}

func (m *Tuple) GetPredicate() isTuple_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (x *Tuple) GetNested() *Nested {
	if x, ok := x.GetPredicate().(*Tuple_Nested); ok {
		return x.Nested
	}
	return nil
}

func (x *Tuple) GetBinary() *Binary {
	if x, ok := x.GetPredicate().(*Tuple_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Tuple) GetUnary() *Unary {
	if x, ok := x.GetPredicate().(*Tuple_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *Tuple) GetList() *List {
	if x, ok := x.GetPredicate().(*Tuple_List); ok {
		return x.List
	}
	return nil
}

func (x *Tuple) GetSelectOnly() Type {
	if x, ok := x.GetPredicate().(*Tuple_SelectOnly); ok {
		return x.SelectOnly
	}
	return Type_list
}

type isTuple_Predicate interface {
	isTuple_Predicate()
}

type Tuple_Nested struct {
	Nested *Nested `protobuf:"bytes,5,opt,name=nested,proto3,oneof"`
}

type Tuple_Binary struct {
	Binary *Binary `protobuf:"bytes,6,opt,name=binary,proto3,oneof"`
}

type Tuple_Unary struct {
	Unary *Unary `protobuf:"bytes,7,opt,name=unary,proto3,oneof"`
}

type Tuple_List struct {
	List *List `protobuf:"bytes,8,opt,name=list,proto3,oneof"`
}

type Tuple_SelectOnly struct {
	SelectOnly Type `protobuf:"varint,9,opt,name=select_only,json=selectOnly,proto3,enum=Type,oneof"`
}

func (*Tuple_Nested) isTuple_Predicate() {}

func (*Tuple_Binary) isTuple_Predicate() {}

func (*Tuple_Unary) isTuple_Predicate() {}

func (*Tuple_List) isTuple_Predicate() {}

func (*Tuple_SelectOnly) isTuple_Predicate() {}

type Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*Expr `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Nested) Reset() {
	*x = Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested) ProtoMessage() {}

func (x *Nested) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested.ProtoReflect.Descriptor instead.
func (*Nested) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{11}
}

func (x *Nested) GetExpr() []*Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Unary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op      Operator `protobuf:"varint,1,opt,name=op,proto3,enum=Operator" json:"op,omitempty"`
	Operand *Operand `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *Unary) Reset() {
	*x = Unary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unary) ProtoMessage() {}

func (x *Unary) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unary.ProtoReflect.Descriptor instead.
func (*Unary) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{12}
}

func (x *Unary) GetOp() Operator {
	if x != nil {
		return x.Op
	}
	return Operator_EQ
}

func (x *Unary) GetOperand() *Operand {
	if x != nil {
		return x.Operand
	}
	return nil
}

type Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  *Operand `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second *Operand `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *Binary) Reset() {
	*x = Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binary.ProtoReflect.Descriptor instead.
func (*Binary) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{13}
}

func (x *Binary) GetFirst() *Operand {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *Binary) GetSecond() *Operand {
	if x != nil {
		return x.Second
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Type       `protobuf:"varint,1,opt,name=type,proto3,enum=Type" json:"type,omitempty"`
	Operands []*Operand `protobuf:"bytes,2,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{14}
}

func (x *List) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_list
}

func (x *List) GetOperands() []*Operand {
	if x != nil {
		return x.Operands
	}
	return nil
}

type OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Direction OrderBy_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=OrderBy_Direction" json:"direction,omitempty"`
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{15}
}

func (x *OrderBy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrderBy) GetDirection() OrderBy_Direction {
	if x != nil {
		return x.Direction
	}
	return OrderBy_ASC
}

type Field_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Field_Struct) Reset() {
	*x = Field_Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssql_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field_Struct) ProtoMessage() {}

func (x *Field_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_ssql_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field_Struct.ProtoReflect.Descriptor instead.
func (*Field_Struct) Descriptor() ([]byte, []int) {
	return file_ssql_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Field_Struct) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_ssql_proto protoreflect.FileDescriptor

var file_ssql_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a,
	0x03, 0x41, 0x75, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x04, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x03,
	0x61, 0x75, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x41, 0x75, 0x78, 0x52,
	0x03, 0x61, 0x75, 0x78, 0x22, 0x42, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x04, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x56, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x22, 0x96, 0x01, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x7a, 0x22, 0x48, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x10, 0x03, 0x22, 0xf5, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x1e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1d, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x66, 0x75, 0x6e,
	0x63, 0x12, 0x1c, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x04, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x15, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x03,
	0x2e, 0x4f, 0x52, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x1f, 0x0a, 0x02, 0x4f, 0x52, 0x12, 0x19, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x22, 0x9e, 0x03, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x6e, 0x74,
	0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x38, 0x12,
	0x16, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12,
	0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x61, 0x74,
	0x65, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x65, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x23, 0x0a, 0x06, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0x46, 0x0a, 0x05, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x22, 0x47, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0xc6, 0x01,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x69, 0x6e, 0x74, 0x38, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x33, 0x32, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x0b, 0x12,
	0x0a, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x36, 0x34, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04,
	0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x10, 0x2a, 0x6c, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45,
	0x51, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47,
	0x45, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4c,
	0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x53, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x09, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x3b, 0x73, 0x73, 0x71, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ssql_proto_rawDescOnce sync.Once
	file_ssql_proto_rawDescData = file_ssql_proto_rawDesc
)

func file_ssql_proto_rawDescGZIP() []byte {
	file_ssql_proto_rawDescOnce.Do(func() {
		file_ssql_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssql_proto_rawDescData)
	})
	return file_ssql_proto_rawDescData
}

var file_ssql_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ssql_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_ssql_proto_goTypes = []interface{}{
	(Type)(0),               // 0: Type
	(Operator)(0),           // 1: Operator
	(Function_Func)(0),      // 2: Function.Func
	(Timestamp_TimeUnit)(0), // 3: Timestamp.TimeUnit
	(OrderBy_Direction)(0),  // 4: OrderBy.Direction
	(*Aux)(nil),             // 5: Aux
	(*Statement)(nil),       // 6: Statement
	(*Parameter)(nil),       // 7: Parameter
	(*Function)(nil),        // 8: Function
	(*Timestamp)(nil),       // 9: Timestamp
	(*Field)(nil),           // 10: Field
	(*Attribute)(nil),       // 11: Attribute
	(*Expr)(nil),            // 12: Expr
	(*OR)(nil),              // 13: OR
	(*Operand)(nil),         // 14: Operand
	(*Tuple)(nil),           // 15: Tuple
	(*Nested)(nil),          // 16: Nested
	(*Unary)(nil),           // 17: Unary
	(*Binary)(nil),          // 18: Binary
	(*List)(nil),            // 19: List
	(*OrderBy)(nil),         // 20: OrderBy
	(*Field_Struct)(nil),    // 21: Field.Struct
}
var file_ssql_proto_depIdxs = []int32{
	11, // 0: Statement.find:type_name -> Attribute
	12, // 1: Statement.where:type_name -> Expr
	20, // 2: Statement.order_by:type_name -> OrderBy
	5,  // 3: Statement.aux:type_name -> Aux
	2,  // 4: Function.name:type_name -> Function.Func
	7,  // 5: Function.parameter:type_name -> Parameter
	3,  // 6: Timestamp.timeunit:type_name -> Timestamp.TimeUnit
	0,  // 7: Field.type:type_name -> Type
	9,  // 8: Field.timestamp:type_name -> Timestamp
	21, // 9: Field.struct:type_name -> Field.Struct
	10, // 10: Field.list:type_name -> Field
	8,  // 11: Attribute.func:type_name -> Function
	10, // 12: Attribute.arrow:type_name -> Field
	13, // 13: Expr.or:type_name -> OR
	15, // 14: Expr.tuple:type_name -> Tuple
	12, // 15: OR.expr:type_name -> Expr
	16, // 16: Tuple.nested:type_name -> Nested
	18, // 17: Tuple.binary:type_name -> Binary
	17, // 18: Tuple.unary:type_name -> Unary
	19, // 19: Tuple.list:type_name -> List
	0,  // 20: Tuple.select_only:type_name -> Type
	12, // 21: Nested.expr:type_name -> Expr
	1,  // 22: Unary.op:type_name -> Operator
	14, // 23: Unary.operand:type_name -> Operand
	14, // 24: Binary.first:type_name -> Operand
	14, // 25: Binary.second:type_name -> Operand
	0,  // 26: List.type:type_name -> Type
	14, // 27: List.operands:type_name -> Operand
	4,  // 28: OrderBy.direction:type_name -> OrderBy.Direction
	10, // 29: Field.Struct.fields:type_name -> Field
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_ssql_proto_init() }
func file_ssql_proto_init() {
	if File_ssql_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssql_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssql_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field_Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ssql_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Parameter_Double)(nil),
		(*Parameter_Int)(nil),
	}
	file_ssql_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Field_Struct_)(nil),
		(*Field_List)(nil),
	}
	file_ssql_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Expr_Or)(nil),
		(*Expr_Tuple)(nil),
	}
	file_ssql_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Operand_Int8)(nil),
		(*Operand_Uint8)(nil),
		(*Operand_Int16)(nil),
		(*Operand_Uint16)(nil),
		(*Operand_Int32)(nil),
		(*Operand_Date32)(nil),
		(*Operand_Uint32)(nil),
		(*Operand_Float32)(nil),
		(*Operand_Int64)(nil),
		(*Operand_Date64)(nil),
		(*Operand_Uint64)(nil),
		(*Operand_Float64)(nil),
		(*Operand_Bool)(nil),
		(*Operand_Text)(nil),
		(*Operand_Null)(nil),
	}
	file_ssql_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Tuple_Nested)(nil),
		(*Tuple_Binary)(nil),
		(*Tuple_Unary)(nil),
		(*Tuple_List)(nil),
		(*Tuple_SelectOnly)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssql_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssql_proto_goTypes,
		DependencyIndexes: file_ssql_proto_depIdxs,
		EnumInfos:         file_ssql_proto_enumTypes,
		MessageInfos:      file_ssql_proto_msgTypes,
	}.Build()
	File_ssql_proto = out.File
	file_ssql_proto_rawDesc = nil
	file_ssql_proto_goTypes = nil
	file_ssql_proto_depIdxs = nil
}
